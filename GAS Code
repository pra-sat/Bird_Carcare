// Code.gs
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet Log ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
function doPost(e) {
  let outputData = {};
  let data = {};
  try {
    data = JSON.parse(e.postData.contents);
    const userId = data.userId;
    const phone = data.phone;
    if (!userId || !phone) throw new Error("Missing required fields: userId or phone.");

    const name = data.name || "";
    const brand = data.brand || "";
    const model = data.model || "";
    const year = data.year || "";
    const category = data.category || "";
    const channel = data.channel || "";

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("Customer_Master");
    if (!sheet) throw new Error("Sheet 'Customer_Master' not found.");

    const values = sheet.getDataRange().getValues();
    for (let i = 1; i < values.length; i++) {
      const sheetUserId = values[i][0].toString().trim();
      const sheetPhone = values[i][1].toString().trim().replace(/^'/, "");
      const sheetBrand = values[i][3].toString().trim();
      const sheetModel = values[i][4].toString().trim();
      const sheetYear = values[i][5].toString().trim();

      Logger.log(`Comparing: ${sheetPhone}, ${sheetBrand}, ${sheetModel}, ${sheetYear}`);

      if (sheetUserId === userId) throw new Error("This LINE user is already registered.\n\n‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin");

      if (sheetPhone === phone && sheetBrand === brand && sheetModel === model && sheetYear === year) {
        throw new Error("This phone number and vehicle are already registered.\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin");
      }
    }

    const point = 0;
    const signupDate = new Date();
    const lastService = "";
    const expirationDate = new Date(signupDate);
    expirationDate.setMonth(expirationDate.getMonth() + 3);

    sheet.appendRow([userId, `'${phone}`, name, brand, model, year, category, channel, point, signupDate, lastService, expirationDate]);

    outputData.status = "success";
    outputData.message = "Data received";
  } catch (err) {
    outputData.status = "error";
    outputData.message = err.message;
  }

  getOrCreateLogSheet().appendRow([new Date(), JSON.stringify(data), outputData.status, outputData.message || ""]);

  return ContentService.createTextOutput(JSON.stringify(outputData)).setMimeType(ContentService.MimeType.JSON);
}


function getOrCreateLogSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let logSheet = ss.getSheetByName("Log");
  if (!logSheet) {
    logSheet = ss.insertSheet("Log");
    logSheet.appendRow(["Timestamp", "Request Data", "Status", "Message"]);
  }
  return logSheet;
}

function doGet(e) {
  if (e.parameter.check === '1') {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("Customer_Master");
    if (!sheet) return ContentService.createTextOutput(JSON.stringify([])).setMimeType(ContentService.MimeType.JSON);

    const values = sheet.getDataRange().getValues();
    const cleaned = values.slice(1).map(row => ({
      phone: row[1].toString().replace(/^'/, ""), // ‡πÄ‡∏≠‡∏≤ ' ‡∏≠‡∏≠‡∏Å
      brand: row[3],
      model: row[4],
      year: row[5]
    }));

    return ContentService.createTextOutput(JSON.stringify(cleaned)).setMimeType(ContentService.MimeType.JSON);
  }

  return HtmlService.createHtmlOutput("üí° Service is running OK - 6. Use POST method to submit data.");
}

